/*
Copyright 2023 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "knative.dev/serving-progressive-rollout/pkg/apis/serving/v1"
)

// RolloutOrchestratorLister helps list RolloutOrchestrators.
// All objects returned here must be treated as read-only.
type RolloutOrchestratorLister interface {
	// List lists all RolloutOrchestrators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RolloutOrchestrator, err error)
	// RolloutOrchestrators returns an object that can list and get RolloutOrchestrators.
	RolloutOrchestrators(namespace string) RolloutOrchestratorNamespaceLister
	RolloutOrchestratorListerExpansion
}

// rolloutOrchestratorLister implements the RolloutOrchestratorLister interface.
type rolloutOrchestratorLister struct {
	indexer cache.Indexer
}

// NewRolloutOrchestratorLister returns a new RolloutOrchestratorLister.
func NewRolloutOrchestratorLister(indexer cache.Indexer) RolloutOrchestratorLister {
	return &rolloutOrchestratorLister{indexer: indexer}
}

// List lists all RolloutOrchestrators in the indexer.
func (s *rolloutOrchestratorLister) List(selector labels.Selector) (ret []*v1.RolloutOrchestrator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RolloutOrchestrator))
	})
	return ret, err
}

// RolloutOrchestrators returns an object that can list and get RolloutOrchestrators.
func (s *rolloutOrchestratorLister) RolloutOrchestrators(namespace string) RolloutOrchestratorNamespaceLister {
	return rolloutOrchestratorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RolloutOrchestratorNamespaceLister helps list and get RolloutOrchestrators.
// All objects returned here must be treated as read-only.
type RolloutOrchestratorNamespaceLister interface {
	// List lists all RolloutOrchestrators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RolloutOrchestrator, err error)
	// Get retrieves the RolloutOrchestrator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RolloutOrchestrator, error)
	RolloutOrchestratorNamespaceListerExpansion
}

// rolloutOrchestratorNamespaceLister implements the RolloutOrchestratorNamespaceLister
// interface.
type rolloutOrchestratorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RolloutOrchestrators in the indexer for a given namespace.
func (s rolloutOrchestratorNamespaceLister) List(selector labels.Selector) (ret []*v1.RolloutOrchestrator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RolloutOrchestrator))
	})
	return ret, err
}

// Get retrieves the RolloutOrchestrator from the indexer for a given namespace and name.
func (s rolloutOrchestratorNamespaceLister) Get(name string) (*v1.RolloutOrchestrator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("rolloutorchestrator"), name)
	}
	return obj.(*v1.RolloutOrchestrator), nil
}
